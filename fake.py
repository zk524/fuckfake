#!/usr/bin/env python3

from aiortc import RTCPeerConnection, RTCSessionDescription, VideoStreamTrack, RTCIceCandidate, RTCIceServer, RTCConfiguration
from modules.processors.frame.core import get_frame_processors_modules
from modules.face_analyser import get_one_face
from insightface.app.common import Face
from modules import core,globals
from av import VideoFrame
from aiohttp import web
from PIL import Image
import numpy as np
import asyncio
import io

        
if __name__ == '__main__':
    core.limit_resources()
    globals.execution_providers = ['CUDAExecutionProvider']
    globals.fp_ui['face_enhancer'] = True
    frame_processors = get_frame_processors_modules(["face_swapper","face_enhancer"])
    source_image = Face(embedding=np.array([0.9415781,-0.71123004,0.17687456,0.5253476,0.37383732,0.5539884,-0.32327345,1.7333039,-0.2281905,0.08607268,-0.27962577,-0.6283468,-1.7237867,-0.49054542,1.0853019,-0.5054026,0.42569086,-0.8885596,-1.4969302,-0.8347579,-0.1475303,-0.53161365,0.7536693,1.2030466,0.15540609,0.5400664,-0.25342816,0.83179575,-0.91386986,-0.9848347,-0.26916248,0.05524243,-1.0674063,1.8100946,0.22754936,0.5185547,0.05051595,0.84855366,-0.8061133,0.94981074,-0.5006907,-0.43965998,0.58010143,0.07410777,-0.60652804,0.02873403,0.40446612,-2.39247,-1.2054515,0.51804906,0.44693613,1.8929837,0.24899405,-0.12133458,-0.45432466,0.04592677,-0.4922382,0.07325549,-1.2241793,0.45116004,0.38352507,-0.5612995,0.27071065,-0.20677601,1.7377448,-0.3288196,0.6679531,-0.4260242,1.4762347,-1.3762453,0.47477275,0.2687371,0.78605473,-0.9191642,-0.1117356,0.5511507,-2.243117,0.29490107,-0.56596947,1.5901034,0.4276068,0.28817096,1.8534411,0.1384373,0.08513086,0.18126807,-1.6336758,-0.5017615,0.5161044,1.3226386,-0.06817055,0.6345198,1.831045,0.8228865,0.09035571,2.1094358,-0.74457836,-1.8800856,-0.6572858,-0.23772234,0.71741897,-0.18388002,0.28063014,-0.7897296,0.10320619,-0.86837816,-0.953221,-0.56958544,0.07508081,-0.09371121,-0.79562896,-0.56468236,-0.82368815,0.41900042,0.34876403,-0.40955588,0.86206996,1.7850449,-0.42425892,-1.3914549,-0.17835182,0.93080324,-0.5278718,0.16157638,-0.46908975,0.9288449,0.46894804,0.40326828,-0.30300352,-1.3598903,-0.1473344,-0.6592052,0.5531203,1.2656585,0.7678779,-1.2902001,0.41941592,0.44196203,-0.87650913,0.22327851,-0.4106638,0.88187194,-0.12831143,1.3974755,1.3000119,-0.01503999,-0.2336606,1.5497229,-1.5067672,1.2615631,-1.649447,-0.9101298,-0.54070294,0.1756572,-0.20003237,0.69226867,0.3449501,-0.195489,-0.34884465,1.1969302,0.6959894,0.4204237,0.44309843,0.8704426,0.3038027,0.03561256,0.37883437,1.2841624,0.4818794,2.0444062,0.1340842,0.7001095,-0.4643846,1.5919025,-0.7790281,0.881124,0.03891996,-1.2247955,1.4919547,0.2531381,-0.36383477,-1.7283368,-1.6070602,0.09022573,-1.1929077,-0.62938994,-0.89529294,-0.01578536,-0.5542871,1.5608596,-0.08127852,0.33413884,1.1262449,-0.07409742,-1.0900978,0.71617854,-0.37854347,-1.6568664,-1.5821445,0.9775405,-0.24972637,-1.0163631,0.5197328,0.04516908,0.89163846,0.5745831,-1.120543,1.0749842,1.3564998,-0.20241556,-0.42478055,0.15270942,0.62424135,2.1797833,-1.4014657,0.15827374,-0.6213561,-0.06186356,0.5882474,0.64114743,0.5584537,-0.05400772,2.0183165,-1.271754,1.6398,-0.64662623,1.8521305,0.36400607,0.25770363,0.6794827,0.26312253,-1.0606419,-0.00501758,2.321492,-0.49641412,-0.24309058,-0.24036805,-0.35511783,-0.46432203,-1.668126,0.03940194,0.02101076,0.8469915,-1.1914577,-1.003893,0.7011603,0.5866062,-1.5601443,0.4696466,-1.0298574,0.36274627,-0.50993943,0.25122765,-0.22135189,-0.08143502,0.5593135,0.15526769,0.9996943,-1.9329451,-0.694411,-1.4588828,-0.8878845,0.14615484,0.8689651,0.4934696,0.651197,-0.03351688,0.3643575,0.34936312,0.37019184,-0.40493548,0.02054991,-0.58036184,0.450659,-1.9778187,0.4714758,-0.04472755,-0.34650356,0.2396217,-0.13700195,0.68387836,-1.5131841,-0.3354179,0.00447247,1.5670388,0.6629772,-1.6847014,0.22712906,0.14930657,-0.49250928,0.20638208,-0.5411419,0.05155334,-1.7904658,-0.2457541,-1.4902807,-1.1469157,-1.6819206,0.6020289,0.45321283,0.28195816,-0.13541755,-0.0928309,-1.8765323,0.27049565,-1.0639122,-1.2667663,0.5208901,1.0771158,-1.4910283,-0.97935396,-0.01844496,1.6506498,-0.238721,0.31337672,0.57935363,-0.51370966,0.55237705,0.39554888,-0.8813231,-0.4412444,-0.05111541,-0.8864674,0.9647131,-0.51380724,-0.33451736,0.10195866,-0.206432,-0.00906763,-0.91078883,-0.3967096,-0.29957464,-0.06566934,-0.40322515,-0.27315247,-0.71823424,1.5185868,-0.00679829,0.6238722,-0.7139366,0.01427143,0.08154098,2.425262,0.5749938,0.4409226,0.5272817,-0.74336404,-0.835325,-1.4402633,-1.3866284,0.37019542,-0.5762376,-0.10421579,-0.6523683,0.03761825,-0.47242695,0.4817943,0.7674646,0.14501828,0.47534642,0.28380632,-0.9445201,1.1515846,-0.31986532,1.6326069,-0.00805893,0.51916087,0.2915483,0.07851532,1.0461222,-0.93749803,-1.382573,1.2138989,-1.1425948,-0.04891891,-1.1317573,-0.56397116,-1.0500383,-0.58621,0.7541445,0.59116226,-0.76046574,-1.1123604,1.1409534,-0.5602582,0.2181862,0.53669333,-0.01036093,-0.40830737,1.8304449,-1.5052767,0.1795806,-0.24006866,0.20893693,0.52801836,0.39328137,-1.3971465,0.9439604,2.5807078,0.10724844,-0.13328509,-0.14272809,-0.80914795,-0.8329456,0.06150353,1.3857449,0.8599391,0.53893775,0.27131253,0.39211574,-1.4929247,-0.01387683,-1.2769475,-1.0909319,1.2529904,0.20615444,0.69765997,-0.20096475,0.2930024,0.69122106,-0.22368987,0.73857945,-0.84572697,0.7326555,-0.33928642,0.2693163,-0.47847408,-1.2576231,0.08713111,0.6832747,-0.7890296,-0.17102307,0.99167603,0.92710745,0.33905253,-0.24682203,-0.6355542,0.17416522,-0.8801252,-0.45913085,-0.31633595,0.09224365,-0.6010398,0.17600526,1.1040956,-0.3744222,0.04892279,-0.32091644,0.3661213,0.7819637,1.0584085,-0.62248063,0.454092,-1.8804241,-1.7595512,0.6843324,-2.4285975,-0.54383075,-1.8885179,-0.43977135,0.312654,0.36309597,-0.10912417,-0.7666927,-0.9861014,-0.48675814,0.6397926,0.09427676,-0.19026689,0.87743086,0.29093373,-0.7847933,0.05733839,1.8779356,0.6785018,-1.271877,-0.10238415,0.6160257,0.1384112,-0.5111434,1.2916842,0.50664914,1.2148446,0.10385613,-0.20159864,1.0978299,-0.19579574,-0.54741776,-1.2923057,0.3769332,-0.9290197,-0.7465974,1.4558427,-0.2924529,1.0318426,-1.502979,0.17484625,0.95124704,-0.32323346,-0.9773832,-0.08086566,-1.3669419,1.3018812,0.19753946,1.0906221,1.443965,0.17127484,-1.3350272,-2.0754046,-0.74043655,0.3973799,-0.88559747],dtype=np.float32))

    def process_data(frame):
        res = frame.to_ndarray(format="bgr24")
        for frame_processor in frame_processors:
            res = frame_processor.process_frame(source_image, res)
        res = VideoFrame.from_ndarray(res, format="bgr24")
        res.pts, res.time_base = frame.pts, frame.time_base
        return res

    class ProcessedVideoStreamTrack(VideoStreamTrack):
        def __init__(self, track):
            super().__init__()
            self.track = track
            self.frame_queue = asyncio.Queue(maxsize=1)
            self.processing_task = None

        async def start(self):
            while True:
                try:
                    frame = await self.track.recv()
                    if self.frame_queue.full():
                        try:
                            self.frame_queue.get_nowait()
                        except asyncio.QueueEmpty:
                            pass
                    await self.frame_queue.put(frame)
                except:
                    break
               
        async def recv(self):
            if self.processing_task is None:
                self.processing_task = asyncio.create_task(self.start())
            return await asyncio.get_event_loop().run_in_executor(None, process_data, await self.frame_queue.get())

    async def handler_connect(request):
        data = await request.json()
        configuration = RTCConfiguration(iceServers=[RTCIceServer(urls='stun:stun.l.google.com:19302')])
        pc = RTCPeerConnection(configuration=configuration)
        
        @pc.on("track")
        def on_track(track):
            if track.kind == "video":
                pc.addTrack(ProcessedVideoStreamTrack(track))

        @pc.on("iceconnectionstatechange")
        async def on_iceconnectionstatechange():
            if pc.iceConnectionState == "failed":
                await pc.close()
                
        await pc.setRemoteDescription(RTCSessionDescription(sdp=data['sdp'], type='offer'))
        await pc.setLocalDescription(await pc.createAnswer())
        for c in data['candidates']:
            p = c.get("candidate").split()
            await pc.addIceCandidate(RTCIceCandidate(foundation=p[0],component=int(p[1]),protocol=p[2].lower(),priority=int(p[3]),ip=p[4],port=int(p[5]),type=p[7],sdpMid=c.get('sdpMid'),sdpMLineIndex=c.get('sdpMLineIndex')))
        return web.json_response({'type': 'answer', 'sdp': pc.localDescription.sdp})
    
    async def handler_source(request):
        data = await request.content.read()
        global source_image
        source_image = get_one_face(np.array(Image.open(io.BytesIO(data))))
        return web.json_response({"status": True})

    app = web.Application()
    app.add_routes([web.post("/", handler_connect), web.post("/src", handler_source)])
    web.run_app(app, host="0.0.0.0",port=8000)
